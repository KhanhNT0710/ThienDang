{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { message } from \"antd\";\nconst KEY_CARTS_LIST = \"key_carts_list\";\nconst initialState = {\n  carts: JSON.parse(localStorage.getItem(KEY_CARTS_LIST)) || []\n};\nconst cartSlice = createSlice({\n  name: \"carts\",\n  initialState: initialState,\n  reducers: {\n    actAddProductToCarts: (state, action) => {\n      const product = action.payload;\n      // const { id, name, imgURL, price, quantity } = product;\n      const existedItemIndex = state.carts.findIndex(cart => cart.id === product.id);\n      // nếu trùng id => + quantity\n      if (existedItemIndex > -1) {\n        state.carts[existedItemIndex].quantity += product.quantity;\n      } else {\n        state.carts.push({\n          ...product\n        });\n      }\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n      message.success(\"Đã thêm vào giỏ hàng\");\n    },\n    actDeleteProductInCarts: (state, action) => {\n      state.carts = state.carts.filter(cart => cart.id !== action.payload);\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n    },\n    actClearCarts: (state, action) => {\n      state.carts = [];\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n    },\n    actUpdateQuantityOfProduct: (state, action) => {\n      const {\n        id,\n        quantity\n      } = action.payload;\n      const existedItemIndex = state.carts.findIndex(item => item.id === id);\n      state.carts[existedItemIndex].quantity = quantity;\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n    }\n  }\n});\nexport const {\n  actAddProductToCarts,\n  actDeleteProductInCarts,\n  actClearCarts,\n  actUpdateQuantityOfProduct\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"names":["createSlice","message","KEY_CARTS_LIST","initialState","carts","JSON","parse","localStorage","getItem","cartSlice","name","reducers","actAddProductToCarts","state","action","product","payload","existedItemIndex","findIndex","cart","id","quantity","push","setItem","stringify","success","actDeleteProductInCarts","filter","actClearCarts","actUpdateQuantityOfProduct","item","actions","cartReducer","reducer"],"sources":["D:/Front End/ReactJS/thien dang/client/src/redux/features/cart/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { message } from \"antd\";\n\nconst KEY_CARTS_LIST = \"key_carts_list\";\nconst initialState = {\n  carts: JSON.parse(localStorage.getItem(KEY_CARTS_LIST)) || [],\n};\n\nconst cartSlice = createSlice({\n  name: \"carts\",\n  initialState: initialState,\n  reducers: {\n    actAddProductToCarts: (state, action) => {\n      const product = action.payload;\n      // const { id, name, imgURL, price, quantity } = product;\n      const existedItemIndex = state.carts.findIndex(\n        (cart) => cart.id === product.id\n      );\n      // nếu trùng id => + quantity\n      if (existedItemIndex > -1) {\n        state.carts[existedItemIndex].quantity += product.quantity;\n      } else {\n        state.carts.push({ ...product });\n      }\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n      message.success(\"Đã thêm vào giỏ hàng\");\n    },\n\n    actDeleteProductInCarts: (state, action) => {\n      state.carts = state.carts.filter((cart) => cart.id !== action.payload);\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n    },\n\n    actClearCarts: (state, action) => {\n      state.carts = [];\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n    },\n\n    actUpdateQuantityOfProduct: (state, action) => {\n      const { id, quantity } = action.payload;\n      const existedItemIndex = state.carts.findIndex((item) => item.id === id);\n      state.carts[existedItemIndex].quantity = quantity;\n      localStorage.setItem(KEY_CARTS_LIST, JSON.stringify(state.carts));\n    },\n  },\n});\n\nexport const {\n  actAddProductToCarts,\n  actDeleteProductInCarts,\n  actClearCarts,\n  actUpdateQuantityOfProduct,\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,MAAM;AAE9B,MAAMC,cAAc,GAAG,gBAAgB;AACvC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,cAAc,CAAC,CAAC,IAAI;AAC7D,CAAC;AAED,MAAMO,SAAS,GAAGT,WAAW,CAAC;EAC5BU,IAAI,EAAE,OAAO;EACbP,YAAY,EAAEA,YAAY;EAC1BQ,QAAQ,EAAE;IACRC,oBAAoB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvC,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B;MACA,MAAMC,gBAAgB,GAAGJ,KAAK,CAACT,KAAK,CAACc,SAAS,CAC3CC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAChC,CAAC;MACD;MACA,IAAIH,gBAAgB,GAAG,CAAC,CAAC,EAAE;QACzBJ,KAAK,CAACT,KAAK,CAACa,gBAAgB,CAAC,CAACI,QAAQ,IAAIN,OAAO,CAACM,QAAQ;MAC5D,CAAC,MAAM;QACLR,KAAK,CAACT,KAAK,CAACkB,IAAI,CAAC;UAAE,GAAGP;QAAQ,CAAC,CAAC;MAClC;MACAR,YAAY,CAACgB,OAAO,CAACrB,cAAc,EAAEG,IAAI,CAACmB,SAAS,CAACX,KAAK,CAACT,KAAK,CAAC,CAAC;MACjEH,OAAO,CAACwB,OAAO,CAAC,sBAAsB,CAAC;IACzC,CAAC;IAEDC,uBAAuB,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC1CD,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACT,KAAK,CAACuB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;MACtET,YAAY,CAACgB,OAAO,CAACrB,cAAc,EAAEG,IAAI,CAACmB,SAAS,CAACX,KAAK,CAACT,KAAK,CAAC,CAAC;IACnE,CAAC;IAEDwB,aAAa,EAAEA,CAACf,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACT,KAAK,GAAG,EAAE;MAChBG,YAAY,CAACgB,OAAO,CAACrB,cAAc,EAAEG,IAAI,CAACmB,SAAS,CAACX,KAAK,CAACT,KAAK,CAAC,CAAC;IACnE,CAAC;IAEDyB,0BAA0B,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAC7C,MAAM;QAAEM,EAAE;QAAEC;MAAS,CAAC,GAAGP,MAAM,CAACE,OAAO;MACvC,MAAMC,gBAAgB,GAAGJ,KAAK,CAACT,KAAK,CAACc,SAAS,CAAEY,IAAI,IAAKA,IAAI,CAACV,EAAE,KAAKA,EAAE,CAAC;MACxEP,KAAK,CAACT,KAAK,CAACa,gBAAgB,CAAC,CAACI,QAAQ,GAAGA,QAAQ;MACjDd,YAAY,CAACgB,OAAO,CAACrB,cAAc,EAAEG,IAAI,CAACmB,SAAS,CAACX,KAAK,CAACT,KAAK,CAAC,CAAC;IACnE;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXQ,oBAAoB;EACpBc,uBAAuB;EACvBE,aAAa;EACbC;AACF,CAAC,GAAGpB,SAAS,CAACsB,OAAO;AACrB,OAAO,MAAMC,WAAW,GAAGvB,SAAS,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}