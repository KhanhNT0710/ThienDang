{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { commentApis } from \"../../../apis/commentApis\";\nimport { message } from \"antd\";\nconst initialState = {\n  isLoading: false,\n  errors: {},\n  comments: [],\n  commentsCalcuStarAverage: [],\n  comment: {},\n  pagination: {\n    currentPage: 1,\n    limitPerPage: 5,\n    total: 25\n  }\n};\nexport const actFetchAllComments = createAsyncThunk(\"comment/fetchAllComments\", async (params = {}) => {\n  const response = await commentApis.getAllComments(params);\n  return {\n    data: response.data,\n    total: response.headers.get(\"X-Total-Count\")\n  };\n});\nexport const actFetchAllCommentsCalcuStarAverage = createAsyncThunk(\"comment/fetchAllCommentsCalcuStarAverage\", async (params = {}) => {\n  const response = await commentApis.getAllComments(params);\n  return response.data;\n});\nexport const actAddComment = createAsyncThunk(\"comment/addComment\", async comment => {\n  const response = await commentApis.addComment(comment);\n  return response;\n});\nexport const actFetchCommentById = createAsyncThunk(\"comment/fetchCommentById\", async id => {\n  const response = await commentApis.getCommentById(id);\n  console.log(response, \"fetch comment by id\");\n  return response.data;\n});\nexport const actEditCommentById = createAsyncThunk(\"comment/editCommentById\", async ({\n  id,\n  commentUpdate\n}) => {\n  const response = await commentApis.editCommentById(id, commentUpdate);\n  return response;\n});\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState: initialState,\n  reducers: {\n    setNewPage: (state, action) => {\n      state.pagination = {\n        ...state.pagination,\n        currentPage: action.payload\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(actFetchAllComments.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(actFetchAllComments.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = {};\n    });\n    builder.addCase(actFetchAllComments.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.comments = action.payload.data;\n      state.pagination.total = action.payload.total;\n    });\n    builder.addCase(actFetchAllCommentsCalcuStarAverage.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.commentsCalcuStarAverage = action.payload;\n    });\n    builder.addCase(actAddComment.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(actAddComment.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = {};\n      message.error(\"add review product failure!\");\n    });\n    builder.addCase(actAddComment.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.comment = action.payload;\n      state.comments.push(action.payload);\n      state.commentsCalcuStarAverage.push(action.payload);\n      message.success(\"Đánh giá sản phẩm thành công!\");\n    });\n    builder.addCase(actEditCommentById.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(actEditCommentById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = {};\n      message.error(\"update review product failure!\");\n    });\n    builder.addCase(actEditCommentById.fulfilled, (state, action) => {\n      console.log(action.payload, \"edit comment fulfilled ne\");\n      message.success(\"update review product success!\");\n    });\n  }\n});\nexport const {\n  setNewPage\n} = commentSlice.actions;\nexport const commentReducer = commentSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","commentApis","message","initialState","isLoading","errors","comments","commentsCalcuStarAverage","comment","pagination","currentPage","limitPerPage","total","actFetchAllComments","params","response","getAllComments","data","headers","get","actFetchAllCommentsCalcuStarAverage","actAddComment","addComment","actFetchCommentById","id","getCommentById","console","log","actEditCommentById","commentUpdate","editCommentById","commentSlice","name","reducers","setNewPage","state","action","payload","extraReducers","builder","addCase","pending","rejected","fulfilled","error","push","success","actions","commentReducer","reducer"],"sources":["D:/Front End/ReactJS/thien dang/client/src/redux/features/comment/commentSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { commentApis } from \"../../../apis/commentApis\";\nimport { message } from \"antd\";\n\nconst initialState = {\n  isLoading: false,\n  errors: {},\n  comments: [],\n  commentsCalcuStarAverage: [],\n  comment: {},\n  pagination: {\n    currentPage: 1,\n    limitPerPage: 5,\n    total: 25,\n  },\n};\n\nexport const actFetchAllComments = createAsyncThunk(\n  \"comment/fetchAllComments\",\n  async (params = {}) => {\n    const response = await commentApis.getAllComments(params);\n    return {\n      data: response.data,\n      total: response.headers.get(\"X-Total-Count\"),\n    };\n  }\n);\n\nexport const actFetchAllCommentsCalcuStarAverage = createAsyncThunk(\n  \"comment/fetchAllCommentsCalcuStarAverage\",\n  async (params = {}) => {\n    const response = await commentApis.getAllComments(params);\n    return response.data;\n  }\n);\n\nexport const actAddComment = createAsyncThunk(\n  \"comment/addComment\",\n  async (comment) => {\n    const response = await commentApis.addComment(comment);\n    return response;\n  }\n);\n\nexport const actFetchCommentById = createAsyncThunk(\n  \"comment/fetchCommentById\",\n  async (id) => {\n    const response = await commentApis.getCommentById(id);\n    console.log(response, \"fetch comment by id\");\n    return response.data;\n  }\n);\n\nexport const actEditCommentById = createAsyncThunk(\n  \"comment/editCommentById\",\n  async ({ id, commentUpdate }) => {\n    const response = await commentApis.editCommentById(id, commentUpdate);\n    return response;\n  }\n);\n\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState: initialState,\n  reducers: {\n    setNewPage: (state, action) => {\n      state.pagination = {\n        ...state.pagination,\n        currentPage: action.payload,\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(actFetchAllComments.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(actFetchAllComments.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = {};\n    });\n    builder.addCase(actFetchAllComments.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.comments = action.payload.data;\n      state.pagination.total = action.payload.total;\n    });\n\n    builder.addCase(\n      actFetchAllCommentsCalcuStarAverage.fulfilled,\n      (state, action) => {\n        state.isLoading = false;\n        state.commentsCalcuStarAverage = action.payload;\n      }\n    );\n\n    builder.addCase(actAddComment.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(actAddComment.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = {};\n      message.error(\"add review product failure!\");\n    });\n    builder.addCase(actAddComment.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.comment = action.payload;\n      state.comments.push(action.payload);\n      state.commentsCalcuStarAverage.push(action.payload);\n      message.success(\"Đánh giá sản phẩm thành công!\");\n    });\n\n    builder.addCase(actEditCommentById.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(actEditCommentById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = {};\n      message.error(\"update review product failure!\");\n    });\n    builder.addCase(actEditCommentById.fulfilled, (state, action) => {\n      console.log(action.payload, \"edit comment fulfilled ne\");\n      message.success(\"update review product success!\");\n    });\n  },\n});\n\nexport const { setNewPage } = commentSlice.actions;\nexport const commentReducer = commentSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}